syntax = "proto3";

package carrental;

// ========== SERVICE DEFINITION ==========
service CarRentalService {
    // Admin operations
    rpc AddCar(AddCarRequest) returns (AddCarResponse);
    rpc UpdateCar(UpdateCarRequest) returns (OperationResponse);
    rpc RemoveCar(RemoveCarRequest) returns (stream Car); // Returns updated list

    // User management (client streaming)
    rpc CreateUsers(stream User) returns (OperationResponse);

    // Customer operations
    rpc ListAvailableCars(AvailableCarsRequest) returns (stream Car); // Server streaming
    rpc SearchCar(SearchCarRequest) returns (SearchCarResponse);
    rpc AddToCart(AddToCartRequest) returns (OperationResponse);
    rpc PlaceReservation(PlaceReservationRequest) returns (ReservationResponse);
}

// ========== CORE DATA STRUCTURES ==========
message Car {
    string plate_number = 1;  // Unique ID
    string make = 2;          // e.g., "Toyota"
    string model = 3;         // e.g., "Camry"
    int32 year = 4;           // e.g., 2022
    float daily_price = 5;    // Daily rental rate
    int32 mileage = 6;        // Current mileage
    CarStatus status = 7;     // Availability status
}

message User {
    string user_id = 1;       // Unique user identifier
    string name = 2;          // User's full name
    Role role = 3;            // Customer or Admin
}

message CartItem {
    string plate_number = 1;  // Car to be rented
    int64 start_date = 2;     // Unix timestamp in milliseconds
    int64 end_date = 3;       // Unix timestamp in milliseconds
}

// ========== REQUEST/RESPONSE MESSAGES ==========
message AddCarRequest {
    Car car = 1;  // Car to be added
}

message AddCarResponse {
    string plate_number = 1;  // Returns the plate (unique ID)
    string message = 2;       // Success/error message
    bool success = 3;         // Operation status
}

message OperationResponse {
    bool success = 1;         // True if operation succeeded
    string message = 2;       // Descriptive message
}

message UpdateCarRequest {
    string plate_number = 1;  // Key to find the car
    optional string make = 2;
    optional string model = 3;
    optional int32 year = 4;
    optional float daily_price = 5;
    optional int32 mileage = 6;
    optional CarStatus status = 7;
}

message RemoveCarRequest {
    string plate_number = 1;  // Plate of car to remove
}

message AvailableCarsRequest {
    optional string filter_text = 1;  // Optional text filter like "Toyota"
    optional int32 filter_year = 2;   // Optional year filter
}

message SearchCarRequest {
    string plate_number = 1;  // Plate to search for
}

message SearchCarResponse {
    oneof result {
        Car car = 1;                // If car is found
        string not_found_message = 2; // If car is not available
    }
}

message AddToCartRequest {
    string user_id = 1;       // Which customer's cart
    string plate_number = 2;  // Car to add
    int64 start_date = 3;     // Rental period start
    int64 end_date = 4;       // Rental period end
}

message PlaceReservationRequest {
    string user_id = 1;       // Customer making reservation
}

message ReservationResponse {
    string reservation_id = 1;    // Unique reservation ID
    string message = 2;           // Confirmation message
    bool success = 3;             // Reservation status
    float total_price = 4;        // Calculated total cost
}

// ========== ENUMERATIONS ==========
enum CarStatus {
    STATUS_UNSPECIFIED = 0;
    STATUS_AVAILABLE = 1;
    STATUS_UNAVAILABLE = 2;
    STATUS_RENTED = 3;
}

enum Role {
    ROLE_UNSPECIFIED = 0;
    ROLE_CUSTOMER = 1;
    ROLE_ADMIN = 2;
}
